#include <Arduino.h>
#include <SPI.h>
#include <Wire.h>
#include <VS1053.h>
#include "BluetoothA2DPSink.h"
#include <cbuf.h>

#define BLUETOOTH_NAME "MyAirSpeaker"
#define VS1053_CS 32
#define VS1053_DCS 33
#define VS1053_DREQ 35

VS1053 HWplayer(VS1053_CS, VS1053_DCS, VS1053_DREQ);
BluetoothA2DPSink a2dp_sink;
char bluetooth_media_title[255];
bool f_bluetoothsink_metadata_received = false;

cbuf circBuffer(1024 * 24);

#define BUFFSIZE 32 
uint8_t mp3buff[BUFFSIZE];

void avrc_metadata_callback(uint8_t data1, const uint8_t *data2) {
    Serial.printf("AVRC metadata rsp: attribute id 0x%x, %s\n", data1, data2);
    if (data1 == 0x1) { // Title
        strncpy(bluetooth_media_title, (char *)data2, sizeof(bluetooth_media_title) - 1);
    } else if (data1 == 0x2) {
        strncat(bluetooth_media_title, " - ", sizeof(bluetooth_media_title) - 1);
        strncat(bluetooth_media_title, (char *)data2, sizeof(bluetooth_media_title) - 1);
        f_bluetoothsink_metadata_received = true;
    }
}

void handle_stream() {
  if (circBuffer.available()) { 
    // if (HWplayer.readyForData()) { // Does the VS1053 want any more data (yet)?
      int bytesRead = circBuffer.read((char *)mp3buff, BUFFSIZE);
      
      // If we didn't read the full 32 bytes, that's a worry
      if (bytesRead != BUFFSIZE) Serial.printf("Only read %d bytes from  circular buffer\n", bytesRead);
      HWplayer.playChunk(mp3buff, bytesRead);// Actually send the data to the VS1053
    // }
  }
}

void read_data_stream(const uint8_t *data, uint32_t length) {
  if (circBuffer.room() > length) { // If we get -1 here it means nothing could be read from the stream
    if (length > 0) { // Add them to the circular buffer
      circBuffer.write((char *)data, length); // length seems to be 4096 every time
      Serial.printf("\nRead %lu bytes", length);
    }else{
      Serial.printf("\nRead 0 bytes :/");
    }
  }else{
    Serial.printf("\nNothing to read");
  }  
}

unsigned char bt_wav_header[44] = {
    0x52, 0x49, 0x46, 0x46, // RIFF
    0xFF, 0xFF, 0xFF, 0xFF, // size
    0x57, 0x41, 0x56, 0x45, // WAVE
    0x66, 0x6d, 0x74, 0x20, // fmt
    0x10, 0x00, 0x00, 0x00, // subchunk1size
    0x01, 0x00,             // audio format - pcm
    0x02, 0x00,             // numof channels
    0x44, 0xac, 0x00, 0x00, //, samplerate 44k1: 0x44, 0xac, 0x00, 0x00       48k: 48000: 0x80, 0xbb, 0x00, 0x00,
    0x10, 0xb1, 0x02, 0x00, // byterate
    0x04, 0x00,             // blockalign
    0x10, 0x00,             // bits per sample - 16
    0x64, 0x61, 0x74, 0x61, // subchunk3id -"data"
    0xFF, 0xFF, 0xFF, 0xFF  // subchunk3size (endless)
};


void setup()
{
  Serial.begin(115200);
  Serial.println("Bluetooth Audio Receiver");

  // if (!player.begin()) {
  //    Serial.println(F("Couldn't find VS1053, do you have the right pins defined?"));
  //    while (1);
  // }

  SPI.begin();
  
  HWplayer.begin();
  HWplayer.switchToMp3Mode(); // optional, some boards require this
  HWplayer.setVolume(80);

  circBuffer.flush();

  a2dp_sink.set_stream_reader(read_data_stream, false);
  a2dp_sink.set_avrc_metadata_callback(avrc_metadata_callback);
  a2dp_sink.start(BLUETOOTH_NAME);
  delay(100);
  circBuffer.write((char *)bt_wav_header, 44);
  delay(100);

  // esp_err_t errRc = esp_ble_tx_power_set(ESP_BLE_PWR_TYPE_DEFAULT, ESP_PWR_LVL_P9);
  // esp_ble_tx_power_set(ESP_BLE_PWR_TYPE_ADV, ESP_PWR_LVL_P9);
  // esp_ble_tx_power_set(ESP_BLE_PWR_TYPE_SCAN, ESP_PWR_LVL_P9);
     
}

void loop()
{
  handle_stream();
}